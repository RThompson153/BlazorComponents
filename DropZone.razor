<div class="dropZone @Class" style="height: inherit" @ref="@_dropZone" @ondragover:preventDefault @ondrop:preventDefault @ondrop:stopPropagation @ondragover="dragOver" @ondrop="onDrop">
	@if (_items != null && _items.Any())
	{
		@foreach (var item in _items)
		{
			<div class="col-6">
				<DropItem Item="@item" OnDrop="dropItemOnItem" />
			</div>
		}
	}
</div>

@code{
	[Parameter]
	public string Class { get; set; }
	[Parameter]
	public IEnumerable<DraggableItem> Items { get; set; }
	[Parameter]
	public EventCallback<DraggableItem?> DragOver { get; set; }
	[Parameter]
	public EventCallback<DraggableItem?> DragLeave { get; set; }
	[Parameter]
	public EventCallback<DraggableItem> Drop { get; set; }
	[Parameter]
	public EventCallback DropItem { get; set; }

	private ElementReference _dropZone;
	private IEnumerable<DraggableItem> _items;

	protected override async Task OnInitializedAsync()
	{
		_items = Items ??= new List<DraggableItem>();

		await base.OnInitializedAsync();
	}

	private void dragOver()
	{
		DragOver.InvokeAsync();
	}

	private void dragLeave()
	{
		DragLeave.InvokeAsync();
	}

	private void onDrop()
	{
		var items = _items.ToList();

		if (itemAlreadyInDropZone())
			return;

		items.Add(Service.CurrentItem);

		_items = items;

		Drop.InvokeAsync(Service.CurrentItem);
	}

	private void dropItemOnItem(DraggableItem tgt)
	{
		var items = _items.ToList();
		var currItem = Service.CurrentItem;

		var tgtIndex = items.FindIndex(i => i.Id == tgt.Id);

		items.Remove(currItem);
		items.Insert(tgtIndex, currItem);

		_items = items;

		DropItem.InvokeAsync();
	}

	private bool itemAlreadyInDropZone() => _items.Any(i => i.Id == Service.CurrentItem.Id);
}