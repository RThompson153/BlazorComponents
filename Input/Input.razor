@using System.Timers

<label for="@Name">@Label</label>
@switch(Type)
{
	case InputTypes.Dropdown:
		<select value="@_value" name="@Name" @onchange="onChange">
			@if(Content != null)
				{
					@Content
				}
		</select>
		break;
	case InputTypes.Radio:
		<input type="radio" value="@_value" name="@Name" checked="@_value" @onclick="onCheck" />
		break;
	case InputTypes.CheckBox:
		<input type="checkbox" value="@_value" name="@Name" checked="@_value" @onclick="onCheck" />
		break;
	case InputTypes.Number:
		<input type="number" value="@_value" name="@Name" min="0" max="@MaxLength" @oninput="onChange"/>
		break;
	default:
		<input type="text" value="@_value" name="@Name" maxlength="@MaxLength" @oninput="onInput" @onkeyup="onKeyup" />
		break;
}

@code {
	[Parameter]
	public string Label { get; set; }
	[Parameter]
	public InputTypes Type { get; set; }
	[Parameter]
	public string Name { get; set; }
	[Parameter]
	public object Value { get; set; }
	[Parameter]
	public decimal MaxLength { get; set; }
	[Parameter]
	public double? Timeout { get; set; }
	[Parameter]
	public RenderFragment? Content { get; set; }
	[Parameter]
	public EventCallback Callback { get; set; }

	private object _value;
	private bool _checked;
	private Timer _timer;

	protected override void OnInitialized()
	{
		//assertRequiredParameter("Name", Name);
		//assertRequiredParameter("Value", Value);

		base.OnInitialized();
	}

	protected override void OnParametersSet()
	{
		_value = Value;
		bool.TryParse(_value?.ToString(), out _checked);

		if(Timeout is not null)
		{
			_timer = new Timer();
			_timer.Interval = Timeout.GetValueOrDefault();
			_timer.Elapsed += (x, y) => Callback.InvokeAsync(_value);
			_timer.AutoReset = false;
		}

		base.OnParametersSet();
	}

	private void onChange(ChangeEventArgs e)
	{
		_value = e.Value;

		if(_timer is not null)
		{
			_timer.Stop();
			_timer.Start();
		}
		else
		{
			Callback.InvokeAsync(_value);
		}
	}

	private void onCheck()
	{
		_checked = !_checked;

		_value = _checked;

		if(_timer is not null)
		{
			_timer.Stop();
			_timer.Start();
		}
		else
		{
			Callback.InvokeAsync(_value);
		}
	}

	private void onInput(ChangeEventArgs e) => _value = e.Value;

	private void onKeyup()
	{
		if(_timer is not null)
		{
			_timer.Stop();
			_timer.Start();
		}
		else
		{
			Callback.InvokeAsync(_value);
		}
	}

	private void assertRequiredParameter(string paramName, object param)
	{
		if(param is null)
			throw new Exception($"The parameter {paramName} is required");
	}
}
