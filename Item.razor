@if (DraggableItem != null)
{
	<div class="draggable-item @_class" draggable="true" @ondrop:preventDefault @ondrop:stopPropagation @ondragover:preventDefault @ondragenter="onDragStart" @ondrop="onDrop" @ondragover="dragOver" @ondragleave="dragLeave" @ref="_dropZone">
		@*<div class="top" @ondrop:preventDefault @ondrop:stopPropagation style="min-height: 2rem;"></div>*@

		<h3>@DraggableItem.Title</h3>

		@*<div class="bottom" @ondrop:preventDefault @ondrop:stopPropagation style="min-height: 2rem;"></div>*@
	</div>
}

@code {
	[Parameter]
	public DraggableItem DraggableItem { get; set; }
	[Parameter]
	public EventCallback<DraggableItem> OnDrag { get; set; }
	[Parameter]
	public EventCallback<DraggableItem> OnDrop { get; set; }

	private string _class;
	private ElementReference _dropZone;

	protected override void OnParametersSet()
	{
		base.OnParametersSet();
	}

	private void onDragStart()
	{
	}

	private void dragOver()
	{
		_class = "bg-warning";
	}

	private void dragLeave()
	{
		_class = "";
	}

	private void onDrop()
	{
		OnDrop.InvokeAsync(DraggableItem);
	}
}
